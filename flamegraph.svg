<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="31111"><g><title>consize-interpreter`&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (133 samples, 0.43%)</title><rect x="0.5914%" y="165" width="0.4275%" height="15" fill="rgb(227,0,7)" fg:x="184" fg:w="133"/><text x="0.8414%" y="175.50"></text></g><g><title>consize-interpreter`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.12%)</title><rect x="1.0189%" y="165" width="0.1189%" height="15" fill="rgb(217,0,24)" fg:x="317" fg:w="37"/><text x="1.2689%" y="175.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$free (277 samples, 0.89%)</title><rect x="1.1379%" y="165" width="0.8904%" height="15" fill="rgb(221,193,54)" fg:x="354" fg:w="277"/><text x="1.3879%" y="175.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$malloc (7 samples, 0.02%)</title><rect x="2.0282%" y="165" width="0.0225%" height="15" fill="rgb(248,212,6)" fg:x="631" fg:w="7"/><text x="2.2782%" y="175.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$memcmp (1,622 samples, 5.21%)</title><rect x="2.0507%" y="165" width="5.2136%" height="15" fill="rgb(208,68,35)" fg:x="638" fg:w="1622"/><text x="2.3007%" y="175.50">consiz..</text></g><g><title>consize-interpreter`DYLD-STUB$$memcpy (39 samples, 0.13%)</title><rect x="7.2643%" y="165" width="0.1254%" height="15" fill="rgb(232,128,0)" fg:x="2260" fg:w="39"/><text x="7.5143%" y="175.50"></text></g><g><title>consize-interpreter`__rdl_alloc (16 samples, 0.05%)</title><rect x="7.3897%" y="165" width="0.0514%" height="15" fill="rgb(207,160,47)" fg:x="2299" fg:w="16"/><text x="7.6397%" y="175.50"></text></g><g><title>consize-interpreter`&lt;alloc::string::String as core::clone::Clone&gt;::clone (31 samples, 0.10%)</title><rect x="31.0662%" y="117" width="0.0996%" height="15" fill="rgb(228,23,34)" fg:x="9665" fg:w="31"/><text x="31.3162%" y="127.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$malloc (12 samples, 0.04%)</title><rect x="31.1658%" y="117" width="0.0386%" height="15" fill="rgb(218,30,26)" fg:x="9696" fg:w="12"/><text x="31.4158%" y="127.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$memcpy (9 samples, 0.03%)</title><rect x="31.2044%" y="117" width="0.0289%" height="15" fill="rgb(220,122,19)" fg:x="9708" fg:w="9"/><text x="31.4544%" y="127.50"></text></g><g><title>consize-interpreter`__rdl_alloc (27 samples, 0.09%)</title><rect x="31.2333%" y="117" width="0.0868%" height="15" fill="rgb(250,228,42)" fg:x="9717" fg:w="27"/><text x="31.4833%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (61 samples, 0.20%)</title><rect x="31.3201%" y="117" width="0.1961%" height="15" fill="rgb(240,193,28)" fg:x="9744" fg:w="61"/><text x="31.5701%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (122 samples, 0.39%)</title><rect x="31.5162%" y="117" width="0.3921%" height="15" fill="rgb(216,20,37)" fg:x="9805" fg:w="122"/><text x="31.7662%" y="127.50"></text></g><g><title>consize-interpreter`&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (472 samples, 1.52%)</title><rect x="30.5680%" y="133" width="1.5171%" height="15" fill="rgb(206,188,39)" fg:x="9510" fg:w="472"/><text x="30.8180%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (55 samples, 0.18%)</title><rect x="31.9083%" y="117" width="0.1768%" height="15" fill="rgb(217,207,13)" fg:x="9927" fg:w="55"/><text x="32.1583%" y="127.50"></text></g><g><title>consize-interpreter`&lt;alloc::string::String as core::clone::Clone&gt;::clone (286 samples, 0.92%)</title><rect x="32.0851%" y="133" width="0.9193%" height="15" fill="rgb(231,73,38)" fg:x="9982" fg:w="286"/><text x="32.3351%" y="143.50"></text></g><g><title>consize-interpreter`&lt;alloc::string::String as core::clone::Clone&gt;::clone (15 samples, 0.05%)</title><rect x="33.3580%" y="101" width="0.0482%" height="15" fill="rgb(225,20,46)" fg:x="10378" fg:w="15"/><text x="33.6080%" y="111.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$malloc (4 samples, 0.01%)</title><rect x="33.4062%" y="101" width="0.0129%" height="15" fill="rgb(210,31,41)" fg:x="10393" fg:w="4"/><text x="33.6562%" y="111.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$memcpy (4 samples, 0.01%)</title><rect x="33.4190%" y="101" width="0.0129%" height="15" fill="rgb(221,200,47)" fg:x="10397" fg:w="4"/><text x="33.6690%" y="111.50"></text></g><g><title>consize-interpreter`__rdl_alloc (10 samples, 0.03%)</title><rect x="33.4319%" y="101" width="0.0321%" height="15" fill="rgb(226,26,5)" fg:x="10401" fg:w="10"/><text x="33.6819%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (40 samples, 0.13%)</title><rect x="33.4640%" y="101" width="0.1286%" height="15" fill="rgb(249,33,26)" fg:x="10411" fg:w="40"/><text x="33.7140%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (56 samples, 0.18%)</title><rect x="33.5926%" y="101" width="0.1800%" height="15" fill="rgb(235,183,28)" fg:x="10451" fg:w="56"/><text x="33.8426%" y="111.50"></text></g><g><title>consize-interpreter`&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (188 samples, 0.60%)</title><rect x="33.2519%" y="117" width="0.6043%" height="15" fill="rgb(221,5,38)" fg:x="10345" fg:w="188"/><text x="33.5019%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (26 samples, 0.08%)</title><rect x="33.7726%" y="101" width="0.0836%" height="15" fill="rgb(247,18,42)" fg:x="10507" fg:w="26"/><text x="34.0226%" y="111.50"></text></g><g><title>consize-interpreter`&lt;alloc::string::String as core::clone::Clone&gt;::clone (20 samples, 0.06%)</title><rect x="33.8562%" y="117" width="0.0643%" height="15" fill="rgb(241,131,45)" fg:x="10533" fg:w="20"/><text x="34.1062%" y="127.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$malloc (4 samples, 0.01%)</title><rect x="33.9205%" y="117" width="0.0129%" height="15" fill="rgb(249,31,29)" fg:x="10553" fg:w="4"/><text x="34.1705%" y="127.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$memcpy (4 samples, 0.01%)</title><rect x="33.9333%" y="117" width="0.0129%" height="15" fill="rgb(225,111,53)" fg:x="10557" fg:w="4"/><text x="34.1833%" y="127.50"></text></g><g><title>consize-interpreter`__rdl_alloc (8 samples, 0.03%)</title><rect x="33.9462%" y="117" width="0.0257%" height="15" fill="rgb(238,160,17)" fg:x="10561" fg:w="8"/><text x="34.1962%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (37 samples, 0.12%)</title><rect x="33.9719%" y="117" width="0.1189%" height="15" fill="rgb(214,148,48)" fg:x="10569" fg:w="37"/><text x="34.2219%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (51 samples, 0.16%)</title><rect x="34.0908%" y="117" width="0.1639%" height="15" fill="rgb(232,36,49)" fg:x="10606" fg:w="51"/><text x="34.3408%" y="127.50"></text></g><g><title>consize-interpreter`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (401 samples, 1.29%)</title><rect x="33.0044%" y="133" width="1.2889%" height="15" fill="rgb(209,103,24)" fg:x="10268" fg:w="401"/><text x="33.2544%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.04%)</title><rect x="34.2548%" y="117" width="0.0386%" height="15" fill="rgb(229,88,8)" fg:x="10657" fg:w="12"/><text x="34.5048%" y="127.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$malloc (109 samples, 0.35%)</title><rect x="34.2933%" y="133" width="0.3504%" height="15" fill="rgb(213,181,19)" fg:x="10669" fg:w="109"/><text x="34.5433%" y="143.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$memcpy (66 samples, 0.21%)</title><rect x="34.6437%" y="133" width="0.2121%" height="15" fill="rgb(254,191,54)" fg:x="10778" fg:w="66"/><text x="34.8937%" y="143.50"></text></g><g><title>consize-interpreter`__rdl_alloc (204 samples, 0.66%)</title><rect x="34.8558%" y="133" width="0.6557%" height="15" fill="rgb(241,83,37)" fg:x="10844" fg:w="204"/><text x="35.1058%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (682 samples, 2.19%)</title><rect x="35.5116%" y="133" width="2.1922%" height="15" fill="rgb(233,36,39)" fg:x="11048" fg:w="682"/><text x="35.7616%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,022 samples, 3.29%)</title><rect x="37.7037%" y="133" width="3.2850%" height="15" fill="rgb(226,3,54)" fg:x="11730" fg:w="1022"/><text x="37.9537%" y="143.50">lib..</text></g><g><title>consize-interpreter`&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4,352 samples, 13.99%)</title><rect x="28.4176%" y="149" width="13.9886%" height="15" fill="rgb(245,192,40)" fg:x="8841" fg:w="4352"/><text x="28.6676%" y="159.50">consize-interpreter`&lt;..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (441 samples, 1.42%)</title><rect x="40.9887%" y="133" width="1.4175%" height="15" fill="rgb(238,167,29)" fg:x="12752" fg:w="441"/><text x="41.2387%" y="143.50"></text></g><g><title>consize-interpreter`&lt;alloc::string::String as core::clone::Clone&gt;::clone (188 samples, 0.60%)</title><rect x="42.4062%" y="149" width="0.6043%" height="15" fill="rgb(232,182,51)" fg:x="13193" fg:w="188"/><text x="42.6562%" y="159.50"></text></g><g><title>consize-interpreter`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.05%)</title><rect x="43.0105%" y="149" width="0.0482%" height="15" fill="rgb(231,60,39)" fg:x="13381" fg:w="15"/><text x="43.2605%" y="159.50"></text></g><g><title>consize-interpreter`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (105 samples, 0.34%)</title><rect x="43.0587%" y="149" width="0.3375%" height="15" fill="rgb(208,69,12)" fg:x="13396" fg:w="105"/><text x="43.3087%" y="159.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$malloc (49 samples, 0.16%)</title><rect x="43.3962%" y="149" width="0.1575%" height="15" fill="rgb(235,93,37)" fg:x="13501" fg:w="49"/><text x="43.6462%" y="159.50"></text></g><g><title>consize-interpreter`__rdl_alloc (41 samples, 0.13%)</title><rect x="43.5537%" y="149" width="0.1318%" height="15" fill="rgb(213,116,39)" fg:x="13550" fg:w="41"/><text x="43.8037%" y="159.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::binary (22 samples, 0.07%)</title><rect x="43.6887%" y="149" width="0.0707%" height="15" fill="rgb(222,207,29)" fg:x="13592" fg:w="22"/><text x="43.9387%" y="159.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::call (14 samples, 0.05%)</title><rect x="43.7594%" y="149" width="0.0450%" height="15" fill="rgb(206,96,30)" fg:x="13614" fg:w="14"/><text x="44.0094%" y="159.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::comment (53 samples, 0.17%)</title><rect x="43.8044%" y="149" width="0.1704%" height="15" fill="rgb(218,138,4)" fg:x="13628" fg:w="53"/><text x="44.0544%" y="159.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::concat (9 samples, 0.03%)</title><rect x="43.9748%" y="149" width="0.0289%" height="15" fill="rgb(250,191,14)" fg:x="13681" fg:w="9"/><text x="44.2248%" y="159.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::dup (19 samples, 0.06%)</title><rect x="44.0037%" y="149" width="0.0611%" height="15" fill="rgb(239,60,40)" fg:x="13690" fg:w="19"/><text x="44.2537%" y="159.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::get (14 samples, 0.05%)</title><rect x="44.0648%" y="149" width="0.0450%" height="15" fill="rgb(206,27,48)" fg:x="13709" fg:w="14"/><text x="44.3148%" y="159.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::push (57 samples, 0.18%)</title><rect x="44.1098%" y="149" width="0.1832%" height="15" fill="rgb(225,35,8)" fg:x="13723" fg:w="57"/><text x="44.3598%" y="159.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::rot (36 samples, 0.12%)</title><rect x="44.2930%" y="149" width="0.1157%" height="15" fill="rgb(250,213,24)" fg:x="13780" fg:w="36"/><text x="44.5430%" y="159.50"></text></g><g><title>consize-interpreter`&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.03%)</title><rect x="45.0805%" y="133" width="0.0289%" height="15" fill="rgb(247,123,22)" fg:x="14025" fg:w="9"/><text x="45.3305%" y="143.50"></text></g><g><title>consize-interpreter`&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="45.1094%" y="133" width="0.0161%" height="15" fill="rgb(231,138,38)" fg:x="14034" fg:w="5"/><text x="45.3594%" y="143.50"></text></g><g><title>consize-interpreter`&lt;consize_interpreter::stack_element::StackElement as core::cmp::PartialEq&gt;::eq (16 samples, 0.05%)</title><rect x="45.1255%" y="133" width="0.0514%" height="15" fill="rgb(231,145,46)" fg:x="14039" fg:w="16"/><text x="45.3755%" y="143.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$free (90 samples, 0.29%)</title><rect x="45.1769%" y="133" width="0.2893%" height="15" fill="rgb(251,118,11)" fg:x="14055" fg:w="90"/><text x="45.4269%" y="143.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$memcpy (15 samples, 0.05%)</title><rect x="45.4662%" y="133" width="0.0482%" height="15" fill="rgb(217,147,25)" fg:x="14145" fg:w="15"/><text x="45.7162%" y="143.50"></text></g><g><title>consize-interpreter`__rdl_dealloc (8 samples, 0.03%)</title><rect x="45.5144%" y="133" width="0.0257%" height="15" fill="rgb(247,81,37)" fg:x="14160" fg:w="8"/><text x="45.7644%" y="143.50"></text></g><g><title>consize-interpreter`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.02%)</title><rect x="45.5402%" y="133" width="0.0193%" height="15" fill="rgb(209,12,38)" fg:x="14168" fg:w="6"/><text x="45.7902%" y="143.50"></text></g><g><title>consize-interpreter`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (20 samples, 0.06%)</title><rect x="45.5594%" y="133" width="0.0643%" height="15" fill="rgb(227,1,9)" fg:x="14174" fg:w="20"/><text x="45.8094%" y="143.50"></text></g><g><title>consize-interpreter`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (5 samples, 0.02%)</title><rect x="46.1412%" y="117" width="0.0161%" height="15" fill="rgb(248,47,43)" fg:x="14355" fg:w="5"/><text x="46.3912%" y="127.50"></text></g><g><title>consize-interpreter`__rdl_alloc (5 samples, 0.02%)</title><rect x="46.1670%" y="117" width="0.0161%" height="15" fill="rgb(221,10,30)" fg:x="14363" fg:w="5"/><text x="46.4170%" y="127.50"></text></g><g><title>consize-interpreter`core::fmt::Formatter::pad_integral (16 samples, 0.05%)</title><rect x="46.1895%" y="117" width="0.0514%" height="15" fill="rgb(210,229,1)" fg:x="14370" fg:w="16"/><text x="46.4395%" y="127.50"></text></g><g><title>consize-interpreter`__rdl_alloc (6 samples, 0.02%)</title><rect x="46.3373%" y="69" width="0.0193%" height="15" fill="rgb(222,148,37)" fg:x="14416" fg:w="6"/><text x="46.5873%" y="79.50"></text></g><g><title>consize-interpreter`alloc::raw_vec::finish_grow (9 samples, 0.03%)</title><rect x="46.3566%" y="69" width="0.0289%" height="15" fill="rgb(234,67,33)" fg:x="14422" fg:w="9"/><text x="46.6066%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (25 samples, 0.08%)</title><rect x="46.3855%" y="69" width="0.0804%" height="15" fill="rgb(247,98,35)" fg:x="14431" fg:w="25"/><text x="46.6355%" y="79.50"></text></g><g><title>consize-interpreter`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (83 samples, 0.27%)</title><rect x="46.3148%" y="85" width="0.2668%" height="15" fill="rgb(247,138,52)" fg:x="14409" fg:w="83"/><text x="46.5648%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (36 samples, 0.12%)</title><rect x="46.4659%" y="69" width="0.1157%" height="15" fill="rgb(213,79,30)" fg:x="14456" fg:w="36"/><text x="46.7159%" y="79.50"></text></g><g><title>consize-interpreter`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (95 samples, 0.31%)</title><rect x="46.2891%" y="101" width="0.3054%" height="15" fill="rgb(246,177,23)" fg:x="14401" fg:w="95"/><text x="46.5391%" y="111.50"></text></g><g><title>consize-interpreter`alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="46.5816%" y="85" width="0.0129%" height="15" fill="rgb(230,62,27)" fg:x="14492" fg:w="4"/><text x="46.8316%" y="95.50"></text></g><g><title>consize-interpreter`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (16 samples, 0.05%)</title><rect x="46.5977%" y="101" width="0.0514%" height="15" fill="rgb(216,154,8)" fg:x="14497" fg:w="16"/><text x="46.8477%" y="111.50"></text></g><g><title>consize-interpreter`core::fmt::Formatter::pad_integral (18 samples, 0.06%)</title><rect x="46.6491%" y="101" width="0.0579%" height="15" fill="rgb(244,35,45)" fg:x="14513" fg:w="18"/><text x="46.8991%" y="111.50"></text></g><g><title>consize-interpreter`core::fmt::Formatter::pad_integral (7 samples, 0.02%)</title><rect x="46.7166%" y="101" width="0.0225%" height="15" fill="rgb(251,115,12)" fg:x="14534" fg:w="7"/><text x="46.9666%" y="111.50"></text></g><g><title>consize-interpreter`core::fmt::Formatter::pad_integral::write_prefix (7 samples, 0.02%)</title><rect x="46.7166%" y="85" width="0.0225%" height="15" fill="rgb(240,54,50)" fg:x="14534" fg:w="7"/><text x="46.9666%" y="95.50"></text></g><g><title>consize-interpreter`core::fmt::num::imp::_&lt;impl core::fmt::Display for i64&gt;::fmt (167 samples, 0.54%)</title><rect x="46.2409%" y="117" width="0.5368%" height="15" fill="rgb(233,84,52)" fg:x="14386" fg:w="167"/><text x="46.4909%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.04%)</title><rect x="46.7391%" y="101" width="0.0386%" height="15" fill="rgb(207,117,47)" fg:x="14541" fg:w="12"/><text x="46.9891%" y="111.50"></text></g><g><title>consize-interpreter`core::num::from_str_radix (133 samples, 0.43%)</title><rect x="46.7777%" y="117" width="0.4275%" height="15" fill="rgb(249,43,39)" fg:x="14553" fg:w="133"/><text x="47.0277%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.04%)</title><rect x="47.2052%" y="117" width="0.0386%" height="15" fill="rgb(209,38,44)" fg:x="14686" fg:w="12"/><text x="47.4552%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (119 samples, 0.38%)</title><rect x="47.2437%" y="117" width="0.3825%" height="15" fill="rgb(236,212,23)" fg:x="14698" fg:w="119"/><text x="47.4937%" y="127.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::binary (648 samples, 2.08%)</title><rect x="45.6237%" y="133" width="2.0829%" height="15" fill="rgb(242,79,21)" fg:x="14194" fg:w="648"/><text x="45.8737%" y="143.50">c..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (25 samples, 0.08%)</title><rect x="47.6262%" y="117" width="0.0804%" height="15" fill="rgb(211,96,35)" fg:x="14817" fg:w="25"/><text x="47.8762%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (14 samples, 0.05%)</title><rect x="48.1598%" y="117" width="0.0450%" height="15" fill="rgb(253,215,40)" fg:x="14983" fg:w="14"/><text x="48.4098%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (230 samples, 0.74%)</title><rect x="48.2048%" y="117" width="0.7393%" height="15" fill="rgb(211,81,21)" fg:x="14997" fg:w="230"/><text x="48.4548%" y="127.50"></text></g><g><title>libsystem_platform.dylib`__bzero (14 samples, 0.05%)</title><rect x="48.9441%" y="117" width="0.0450%" height="15" fill="rgb(208,190,38)" fg:x="15227" fg:w="14"/><text x="49.1941%" y="127.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::call (421 samples, 1.35%)</title><rect x="47.7066%" y="133" width="1.3532%" height="15" fill="rgb(235,213,38)" fg:x="14842" fg:w="421"/><text x="47.9566%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (22 samples, 0.07%)</title><rect x="48.9891%" y="117" width="0.0707%" height="15" fill="rgb(237,122,38)" fg:x="15241" fg:w="22"/><text x="49.2391%" y="127.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::comment (107 samples, 0.34%)</title><rect x="49.0598%" y="133" width="0.3439%" height="15" fill="rgb(244,218,35)" fg:x="15263" fg:w="107"/><text x="49.3098%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (92 samples, 0.30%)</title><rect x="49.6802%" y="117" width="0.2957%" height="15" fill="rgb(240,68,47)" fg:x="15456" fg:w="92"/><text x="49.9302%" y="127.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::concat (204 samples, 0.66%)</title><rect x="49.4037%" y="133" width="0.6557%" height="15" fill="rgb(210,16,53)" fg:x="15370" fg:w="204"/><text x="49.6537%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (26 samples, 0.08%)</title><rect x="49.9759%" y="117" width="0.0836%" height="15" fill="rgb(235,124,12)" fg:x="15548" fg:w="26"/><text x="50.2259%" y="127.50"></text></g><g><title>consize-interpreter`&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.05%)</title><rect x="50.9755%" y="101" width="0.0482%" height="15" fill="rgb(224,169,11)" fg:x="15859" fg:w="15"/><text x="51.2255%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.02%)</title><rect x="51.0045%" y="85" width="0.0193%" height="15" fill="rgb(250,166,2)" fg:x="15868" fg:w="6"/><text x="51.2545%" y="95.50"></text></g><g><title>consize-interpreter`&lt;alloc::string::String as core::clone::Clone&gt;::clone (42 samples, 0.14%)</title><rect x="51.0238%" y="101" width="0.1350%" height="15" fill="rgb(242,216,29)" fg:x="15874" fg:w="42"/><text x="51.2738%" y="111.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$malloc (19 samples, 0.06%)</title><rect x="51.1588%" y="101" width="0.0611%" height="15" fill="rgb(230,116,27)" fg:x="15916" fg:w="19"/><text x="51.4088%" y="111.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$memcpy (17 samples, 0.05%)</title><rect x="51.2198%" y="101" width="0.0546%" height="15" fill="rgb(228,99,48)" fg:x="15935" fg:w="17"/><text x="51.4698%" y="111.50"></text></g><g><title>consize-interpreter`__rdl_alloc (36 samples, 0.12%)</title><rect x="51.2745%" y="101" width="0.1157%" height="15" fill="rgb(253,11,6)" fg:x="15952" fg:w="36"/><text x="51.5245%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (79 samples, 0.25%)</title><rect x="51.3902%" y="101" width="0.2539%" height="15" fill="rgb(247,143,39)" fg:x="15988" fg:w="79"/><text x="51.6402%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (155 samples, 0.50%)</title><rect x="51.6441%" y="101" width="0.4982%" height="15" fill="rgb(236,97,10)" fg:x="16067" fg:w="155"/><text x="51.8941%" y="111.50"></text></g><g><title>consize-interpreter`&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (475 samples, 1.53%)</title><rect x="50.8341%" y="117" width="1.5268%" height="15" fill="rgb(233,208,19)" fg:x="15815" fg:w="475"/><text x="51.0841%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (68 samples, 0.22%)</title><rect x="52.1423%" y="101" width="0.2186%" height="15" fill="rgb(216,164,2)" fg:x="16222" fg:w="68"/><text x="52.3923%" y="111.50"></text></g><g><title>consize-interpreter`&lt;alloc::string::String as core::clone::Clone&gt;::clone (41 samples, 0.13%)</title><rect x="52.3609%" y="117" width="0.1318%" height="15" fill="rgb(220,129,5)" fg:x="16290" fg:w="41"/><text x="52.6109%" y="127.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$malloc (4 samples, 0.01%)</title><rect x="52.4959%" y="117" width="0.0129%" height="15" fill="rgb(242,17,10)" fg:x="16332" fg:w="4"/><text x="52.7459%" y="127.50"></text></g><g><title>consize-interpreter`__rdl_alloc (5 samples, 0.02%)</title><rect x="52.5152%" y="117" width="0.0161%" height="15" fill="rgb(242,107,0)" fg:x="16338" fg:w="5"/><text x="52.7652%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (43 samples, 0.14%)</title><rect x="52.5313%" y="117" width="0.1382%" height="15" fill="rgb(251,28,31)" fg:x="16343" fg:w="43"/><text x="52.7813%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (48 samples, 0.15%)</title><rect x="52.6695%" y="117" width="0.1543%" height="15" fill="rgb(233,223,10)" fg:x="16386" fg:w="48"/><text x="52.9195%" y="127.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::dup (884 samples, 2.84%)</title><rect x="50.0595%" y="133" width="2.8414%" height="15" fill="rgb(215,21,27)" fg:x="15574" fg:w="884"/><text x="50.3095%" y="143.50">co..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 0.08%)</title><rect x="52.8238%" y="117" width="0.0771%" height="15" fill="rgb(232,23,21)" fg:x="16434" fg:w="24"/><text x="53.0738%" y="127.50"></text></g><g><title>consize-interpreter`&lt;consize_interpreter::stack_element::StackElement as core::cmp::PartialEq&gt;::eq (7 samples, 0.02%)</title><rect x="53.0841%" y="117" width="0.0225%" height="15" fill="rgb(244,5,23)" fg:x="16515" fg:w="7"/><text x="53.3341%" y="127.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$free (18 samples, 0.06%)</title><rect x="53.1066%" y="117" width="0.0579%" height="15" fill="rgb(226,81,46)" fg:x="16522" fg:w="18"/><text x="53.3566%" y="127.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$memcmp (5 samples, 0.02%)</title><rect x="53.1645%" y="117" width="0.0161%" height="15" fill="rgb(247,70,30)" fg:x="16540" fg:w="5"/><text x="53.4145%" y="127.50"></text></g><g><title>consize-interpreter`core::ptr::drop_in_place&lt;consize_interpreter::stack_element::StackElement&gt; (10 samples, 0.03%)</title><rect x="53.2448%" y="101" width="0.0321%" height="15" fill="rgb(212,68,19)" fg:x="16565" fg:w="10"/><text x="53.4948%" y="111.50"></text></g><g><title>consize-interpreter`core::ptr::drop_in_place&lt;(consize_interpreter::stack_element::StackElement,consize_interpreter::stack_element::StackElement)&gt; (129 samples, 0.41%)</title><rect x="53.1838%" y="117" width="0.4146%" height="15" fill="rgb(240,187,13)" fg:x="16546" fg:w="129"/><text x="53.4338%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (99 samples, 0.32%)</title><rect x="53.2802%" y="101" width="0.3182%" height="15" fill="rgb(223,113,26)" fg:x="16576" fg:w="99"/><text x="53.5302%" y="111.50"></text></g><g><title>consize-interpreter`core::ptr::drop_in_place&lt;consize_interpreter::stack_element::StackElement&gt; (8 samples, 0.03%)</title><rect x="53.5984%" y="117" width="0.0257%" height="15" fill="rgb(206,192,2)" fg:x="16675" fg:w="8"/><text x="53.8484%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_free (71 samples, 0.23%)</title><rect x="53.6241%" y="117" width="0.2282%" height="15" fill="rgb(241,108,4)" fg:x="16683" fg:w="71"/><text x="53.8741%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (147 samples, 0.47%)</title><rect x="53.8523%" y="117" width="0.4725%" height="15" fill="rgb(247,173,49)" fg:x="16754" fg:w="147"/><text x="54.1023%" y="127.50"></text></g><g><title>libsystem_platform.dylib`__bzero (4 samples, 0.01%)</title><rect x="54.3248%" y="117" width="0.0129%" height="15" fill="rgb(224,114,35)" fg:x="16901" fg:w="4"/><text x="54.5748%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (16 samples, 0.05%)</title><rect x="54.3377%" y="117" width="0.0514%" height="15" fill="rgb(245,159,27)" fg:x="16905" fg:w="16"/><text x="54.5877%" y="127.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::get (501 samples, 1.61%)</title><rect x="52.9009%" y="133" width="1.6104%" height="15" fill="rgb(245,172,44)" fg:x="16458" fg:w="501"/><text x="53.1509%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (38 samples, 0.12%)</title><rect x="54.3891%" y="117" width="0.1221%" height="15" fill="rgb(236,23,11)" fg:x="16921" fg:w="38"/><text x="54.6391%" y="127.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::get_dict (5 samples, 0.02%)</title><rect x="54.5113%" y="133" width="0.0161%" height="15" fill="rgb(205,117,38)" fg:x="16959" fg:w="5"/><text x="54.7613%" y="143.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$malloc (7 samples, 0.02%)</title><rect x="56.8609%" y="101" width="0.0225%" height="15" fill="rgb(237,72,25)" fg:x="17690" fg:w="7"/><text x="57.1109%" y="111.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$realloc (4 samples, 0.01%)</title><rect x="56.8834%" y="101" width="0.0129%" height="15" fill="rgb(244,70,9)" fg:x="17697" fg:w="4"/><text x="57.1334%" y="111.50"></text></g><g><title>consize-interpreter`__rdl_alloc (4 samples, 0.01%)</title><rect x="56.8963%" y="101" width="0.0129%" height="15" fill="rgb(217,125,39)" fg:x="17701" fg:w="4"/><text x="57.1463%" y="111.50"></text></g><g><title>consize-interpreter`__rdl_realloc (13 samples, 0.04%)</title><rect x="56.9091%" y="101" width="0.0418%" height="15" fill="rgb(235,36,10)" fg:x="17705" fg:w="13"/><text x="57.1591%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (5 samples, 0.02%)</title><rect x="57.0891%" y="53" width="0.0161%" height="15" fill="rgb(251,123,47)" fg:x="17761" fg:w="5"/><text x="57.3391%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (15 samples, 0.05%)</title><rect x="57.1052%" y="53" width="0.0482%" height="15" fill="rgb(221,13,13)" fg:x="17766" fg:w="15"/><text x="57.3552%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (27 samples, 0.09%)</title><rect x="57.1534%" y="53" width="0.0868%" height="15" fill="rgb(238,131,9)" fg:x="17781" fg:w="27"/><text x="57.4034%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (30 samples, 0.10%)</title><rect x="57.2402%" y="53" width="0.0964%" height="15" fill="rgb(211,50,8)" fg:x="17808" fg:w="30"/><text x="57.4902%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (41 samples, 0.13%)</title><rect x="57.3784%" y="37" width="0.1318%" height="15" fill="rgb(245,182,24)" fg:x="17851" fg:w="41"/><text x="57.6284%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (72 samples, 0.23%)</title><rect x="57.3366%" y="53" width="0.2314%" height="15" fill="rgb(242,14,37)" fg:x="17838" fg:w="72"/><text x="57.5866%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (18 samples, 0.06%)</title><rect x="57.5102%" y="37" width="0.0579%" height="15" fill="rgb(246,228,12)" fg:x="17892" fg:w="18"/><text x="57.7602%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (179 samples, 0.58%)</title><rect x="57.0313%" y="69" width="0.5754%" height="15" fill="rgb(213,55,15)" fg:x="17743" fg:w="179"/><text x="57.2813%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.04%)</title><rect x="57.5681%" y="53" width="0.0386%" height="15" fill="rgb(209,9,3)" fg:x="17910" fg:w="12"/><text x="57.8181%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (206 samples, 0.66%)</title><rect x="56.9798%" y="85" width="0.6621%" height="15" fill="rgb(230,59,30)" fg:x="17727" fg:w="206"/><text x="57.2298%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (11 samples, 0.04%)</title><rect x="57.6066%" y="69" width="0.0354%" height="15" fill="rgb(209,121,21)" fg:x="17922" fg:w="11"/><text x="57.8566%" y="79.50"></text></g><g><title>consize-interpreter`alloc::raw_vec::finish_grow (246 samples, 0.79%)</title><rect x="56.9509%" y="101" width="0.7907%" height="15" fill="rgb(220,109,13)" fg:x="17718" fg:w="246"/><text x="57.2009%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (31 samples, 0.10%)</title><rect x="57.6420%" y="85" width="0.0996%" height="15" fill="rgb(232,18,1)" fg:x="17933" fg:w="31"/><text x="57.8920%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (30 samples, 0.10%)</title><rect x="57.7416%" y="101" width="0.0964%" height="15" fill="rgb(215,41,42)" fg:x="17964" fg:w="30"/><text x="57.9916%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (16 samples, 0.05%)</title><rect x="57.8381%" y="101" width="0.0514%" height="15" fill="rgb(224,123,36)" fg:x="17994" fg:w="16"/><text x="58.0881%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (61 samples, 0.20%)</title><rect x="57.8895%" y="101" width="0.1961%" height="15" fill="rgb(240,125,3)" fg:x="18010" fg:w="61"/><text x="58.1395%" y="111.50"></text></g><g><title>consize-interpreter`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (479 samples, 1.54%)</title><rect x="56.5491%" y="117" width="1.5396%" height="15" fill="rgb(205,98,50)" fg:x="17593" fg:w="479"/><text x="56.7991%" y="127.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::push (1,137 samples, 3.65%)</title><rect x="54.5273%" y="133" width="3.6547%" height="15" fill="rgb(205,185,37)" fg:x="16964" fg:w="1137"/><text x="54.7773%" y="143.50">cons..</text></g><g><title>consize-interpreter`alloc::raw_vec::finish_grow (29 samples, 0.09%)</title><rect x="58.0888%" y="117" width="0.0932%" height="15" fill="rgb(238,207,15)" fg:x="18072" fg:w="29"/><text x="58.3388%" y="127.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::rot (109 samples, 0.35%)</title><rect x="58.1820%" y="133" width="0.3504%" height="15" fill="rgb(213,199,42)" fg:x="18101" fg:w="109"/><text x="58.4320%" y="143.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::swap (24 samples, 0.08%)</title><rect x="58.5420%" y="133" width="0.0771%" height="15" fill="rgb(235,201,11)" fg:x="18213" fg:w="24"/><text x="58.7920%" y="143.50"></text></g><g><title>consize-interpreter`core::ptr::drop_in_place&lt;consize_interpreter::stack_element::StackElement&gt; (16 samples, 0.05%)</title><rect x="58.6256%" y="117" width="0.0514%" height="15" fill="rgb(207,46,11)" fg:x="18239" fg:w="16"/><text x="58.8756%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.03%)</title><rect x="58.6513%" y="101" width="0.0257%" height="15" fill="rgb(241,35,35)" fg:x="18247" fg:w="8"/><text x="58.9013%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.01%)</title><rect x="58.6770%" y="117" width="0.0129%" height="15" fill="rgb(243,32,47)" fg:x="18255" fg:w="4"/><text x="58.9270%" y="127.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::top (33 samples, 0.11%)</title><rect x="58.6191%" y="133" width="0.1061%" height="15" fill="rgb(247,202,23)" fg:x="18237" fg:w="33"/><text x="58.8691%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (11 samples, 0.04%)</title><rect x="58.6899%" y="117" width="0.0354%" height="15" fill="rgb(219,102,11)" fg:x="18259" fg:w="11"/><text x="58.9399%" y="127.50"></text></g><g><title>consize-interpreter`core::fmt::Formatter::new (5 samples, 0.02%)</title><rect x="58.7252%" y="133" width="0.0161%" height="15" fill="rgb(243,110,44)" fg:x="18270" fg:w="5"/><text x="58.9752%" y="143.50"></text></g><g><title>consize-interpreter`core::ptr::drop_in_place&lt;consize_interpreter::stack_element::StackElement&gt; (14 samples, 0.05%)</title><rect x="58.7477%" y="133" width="0.0450%" height="15" fill="rgb(222,74,54)" fg:x="18277" fg:w="14"/><text x="58.9977%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_free (289 samples, 0.93%)</title><rect x="58.7927%" y="133" width="0.9289%" height="15" fill="rgb(216,99,12)" fg:x="18291" fg:w="289"/><text x="59.0427%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (84 samples, 0.27%)</title><rect x="59.7216%" y="133" width="0.2700%" height="15" fill="rgb(226,22,26)" fg:x="18580" fg:w="84"/><text x="59.9716%" y="143.50"></text></g><g><title>consize-interpreter`core::ops::function::Fn::call (5,194 samples, 16.70%)</title><rect x="44.4184%" y="149" width="16.6951%" height="15" fill="rgb(217,163,10)" fg:x="13819" fg:w="5194"/><text x="44.6684%" y="159.50">consize-interpreter`core::..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (348 samples, 1.12%)</title><rect x="59.9949%" y="133" width="1.1186%" height="15" fill="rgb(213,25,53)" fg:x="18665" fg:w="348"/><text x="60.2449%" y="143.50"></text></g><g><title>consize-interpreter`core::ptr::drop_in_place&lt;consize_interpreter::stack_element::StackElement&gt; (10 samples, 0.03%)</title><rect x="61.1134%" y="149" width="0.0321%" height="15" fill="rgb(252,105,26)" fg:x="19013" fg:w="10"/><text x="61.3634%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (17 samples, 0.05%)</title><rect x="61.1456%" y="149" width="0.0546%" height="15" fill="rgb(220,39,43)" fg:x="19023" fg:w="17"/><text x="61.3956%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (161 samples, 0.52%)</title><rect x="61.2002%" y="149" width="0.5175%" height="15" fill="rgb(229,68,48)" fg:x="19040" fg:w="161"/><text x="61.4502%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1,966 samples, 6.32%)</title><rect x="61.7177%" y="149" width="6.3193%" height="15" fill="rgb(252,8,32)" fg:x="19201" fg:w="1966"/><text x="61.9677%" y="159.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.02%)</title><rect x="68.0370%" y="149" width="0.0161%" height="15" fill="rgb(223,20,43)" fg:x="21167" fg:w="5"/><text x="68.2870%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (254 samples, 0.82%)</title><rect x="68.0531%" y="149" width="0.8164%" height="15" fill="rgb(229,81,49)" fg:x="21172" fg:w="254"/><text x="68.3031%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (24 samples, 0.08%)</title><rect x="68.8695%" y="149" width="0.0771%" height="15" fill="rgb(236,28,36)" fg:x="21426" fg:w="24"/><text x="69.1195%" y="159.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::stepcc (19,233 samples, 61.82%)</title><rect x="7.4443%" y="165" width="61.8206%" height="15" fill="rgb(249,185,26)" fg:x="2316" fg:w="19233"/><text x="7.6943%" y="175.50">consize-interpreter`consize_interpreter::interpreter::Interpreter::stepcc</text></g><g><title>libsystem_platform.dylib`_platform_memset (99 samples, 0.32%)</title><rect x="68.9467%" y="149" width="0.3182%" height="15" fill="rgb(249,174,33)" fg:x="21450" fg:w="99"/><text x="69.1967%" y="159.50"></text></g><g><title>consize-interpreter`core::ops::function::Fn::call (146 samples, 0.47%)</title><rect x="69.2649%" y="165" width="0.4693%" height="15" fill="rgb(233,201,37)" fg:x="21549" fg:w="146"/><text x="69.5149%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (1,020 samples, 3.28%)</title><rect x="69.7342%" y="165" width="3.2786%" height="15" fill="rgb(221,78,26)" fg:x="21695" fg:w="1020"/><text x="69.9842%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (66 samples, 0.21%)</title><rect x="73.0128%" y="165" width="0.2121%" height="15" fill="rgb(250,127,30)" fg:x="22715" fg:w="66"/><text x="73.2628%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (318 samples, 1.02%)</title><rect x="73.2249%" y="165" width="1.0221%" height="15" fill="rgb(230,49,44)" fg:x="22781" fg:w="318"/><text x="73.4749%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.01%)</title><rect x="74.2471%" y="165" width="0.0129%" height="15" fill="rgb(229,67,23)" fg:x="23099" fg:w="4"/><text x="74.4971%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (79 samples, 0.25%)</title><rect x="74.2599%" y="165" width="0.2539%" height="15" fill="rgb(249,83,47)" fg:x="23103" fg:w="79"/><text x="74.5099%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (7,226 samples, 23.23%)</title><rect x="74.5138%" y="165" width="23.2265%" height="15" fill="rgb(215,43,3)" fg:x="23182" fg:w="7226"/><text x="74.7638%" y="175.50">libsystem_platform.dylib`_platform_me..</text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::func::_{{closure}} (30,584 samples, 98.31%)</title><rect x="0.0032%" y="181" width="98.3061%" height="15" fill="rgb(238,154,13)" fg:x="1" fg:w="30584"/><text x="0.2532%" y="191.50">consize-interpreter`consize_interpreter::interpreter::Interpreter::func::_{{closure}}</text></g><g><title>libsystem_platform.dylib`_platform_memmove (177 samples, 0.57%)</title><rect x="97.7403%" y="165" width="0.5689%" height="15" fill="rgb(219,56,2)" fg:x="30408" fg:w="177"/><text x="97.9903%" y="175.50"></text></g><g><title>all (31,111 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(233,0,4)" fg:x="0" fg:w="31111"/><text x="0.2500%" y="335.50"></text></g><g><title>dyld`start (31,111 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(235,30,7)" fg:x="0" fg:w="31111"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>consize-interpreter`main (31,111 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(250,79,13)" fg:x="0" fg:w="31111"/><text x="0.2500%" y="303.50">consize-interpreter`main</text></g><g><title>consize-interpreter`std::rt::lang_start_internal (31,111 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(211,146,34)" fg:x="0" fg:w="31111"/><text x="0.2500%" y="287.50">consize-interpreter`std::rt::lang_start_internal</text></g><g><title>consize-interpreter`std::rt::lang_start::_{{closure}} (31,110 samples, 100.00%)</title><rect x="0.0032%" y="261" width="99.9968%" height="15" fill="rgb(228,22,38)" fg:x="1" fg:w="31110"/><text x="0.2532%" y="271.50">consize-interpreter`std::rt::lang_start::_{{closure}}</text></g><g><title>consize-interpreter`std::sys_common::backtrace::__rust_begin_short_backtrace (31,110 samples, 100.00%)</title><rect x="0.0032%" y="245" width="99.9968%" height="15" fill="rgb(235,168,5)" fg:x="1" fg:w="31110"/><text x="0.2532%" y="255.50">consize-interpreter`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>consize-interpreter`consize_interpreter::main (31,110 samples, 100.00%)</title><rect x="0.0032%" y="229" width="99.9968%" height="15" fill="rgb(221,155,16)" fg:x="1" fg:w="31110"/><text x="0.2532%" y="239.50">consize-interpreter`consize_interpreter::main</text></g><g><title>consize-interpreter`consize_interpreter::call (31,110 samples, 100.00%)</title><rect x="0.0032%" y="213" width="99.9968%" height="15" fill="rgb(215,215,53)" fg:x="1" fg:w="31110"/><text x="0.2532%" y="223.50">consize-interpreter`consize_interpreter::call</text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::apply (31,110 samples, 100.00%)</title><rect x="0.0032%" y="197" width="99.9968%" height="15" fill="rgb(223,4,10)" fg:x="1" fg:w="31110"/><text x="0.2532%" y="207.50">consize-interpreter`consize_interpreter::interpreter::Interpreter::apply</text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::stepcc (526 samples, 1.69%)</title><rect x="98.3093%" y="181" width="1.6907%" height="15" fill="rgb(234,103,6)" fg:x="30585" fg:w="526"/><text x="98.5593%" y="191.50"></text></g></svg></svg>