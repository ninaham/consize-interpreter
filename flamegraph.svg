<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="341.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="30909"><g><title>consize-interpreter`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (106 samples, 0.34%)</title><rect x="0.5209%" y="165" width="0.3429%" height="15" fill="rgb(227,0,7)" fg:x="161" fg:w="106"/><text x="0.7709%" y="175.50"></text></g><g><title>consize-interpreter`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.15%)</title><rect x="0.8638%" y="165" width="0.1488%" height="15" fill="rgb(217,0,24)" fg:x="267" fg:w="46"/><text x="1.1138%" y="175.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$free (297 samples, 0.96%)</title><rect x="1.0127%" y="165" width="0.9609%" height="15" fill="rgb(221,193,54)" fg:x="313" fg:w="297"/><text x="1.2627%" y="175.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$malloc (15 samples, 0.05%)</title><rect x="1.9735%" y="165" width="0.0485%" height="15" fill="rgb(248,212,6)" fg:x="610" fg:w="15"/><text x="2.2235%" y="175.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$memcmp (1,569 samples, 5.08%)</title><rect x="2.0221%" y="165" width="5.0762%" height="15" fill="rgb(208,68,35)" fg:x="625" fg:w="1569"/><text x="2.2721%" y="175.50">consiz..</text></g><g><title>consize-interpreter`DYLD-STUB$$memcpy (44 samples, 0.14%)</title><rect x="7.0983%" y="165" width="0.1424%" height="15" fill="rgb(232,128,0)" fg:x="2194" fg:w="44"/><text x="7.3483%" y="175.50"></text></g><g><title>consize-interpreter`__rdl_alloc (21 samples, 0.07%)</title><rect x="7.2406%" y="165" width="0.0679%" height="15" fill="rgb(207,160,47)" fg:x="2238" fg:w="21"/><text x="7.4906%" y="175.50"></text></g><g><title>consize-interpreter`__rust_alloc (4 samples, 0.01%)</title><rect x="7.3086%" y="165" width="0.0129%" height="15" fill="rgb(228,23,34)" fg:x="2259" fg:w="4"/><text x="7.5586%" y="175.50"></text></g><g><title>consize-interpreter`&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.05%)</title><rect x="28.6777%" y="149" width="0.0485%" height="15" fill="rgb(218,30,26)" fg:x="8864" fg:w="15"/><text x="28.9277%" y="159.50"></text></g><g><title>consize-interpreter`&lt;alloc::string::String as core::clone::Clone&gt;::clone (216 samples, 0.70%)</title><rect x="28.7263%" y="149" width="0.6988%" height="15" fill="rgb(220,122,19)" fg:x="8879" fg:w="216"/><text x="28.9763%" y="159.50"></text></g><g><title>consize-interpreter`&lt;alloc::string::String as core::clone::Clone&gt;::clone (29 samples, 0.09%)</title><rect x="31.7383%" y="117" width="0.0938%" height="15" fill="rgb(250,228,42)" fg:x="9810" fg:w="29"/><text x="31.9883%" y="127.50"></text></g><g><title>consize-interpreter`&lt;alloc::string::String as core::clone::Clone&gt;::clone (12 samples, 0.04%)</title><rect x="31.9292%" y="101" width="0.0388%" height="15" fill="rgb(240,193,28)" fg:x="9869" fg:w="12"/><text x="32.1792%" y="111.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$malloc (8 samples, 0.03%)</title><rect x="31.9680%" y="101" width="0.0259%" height="15" fill="rgb(216,20,37)" fg:x="9881" fg:w="8"/><text x="32.2180%" y="111.50"></text></g><g><title>consize-interpreter`__rdl_alloc (10 samples, 0.03%)</title><rect x="32.0004%" y="101" width="0.0324%" height="15" fill="rgb(206,188,39)" fg:x="9891" fg:w="10"/><text x="32.2504%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (32 samples, 0.10%)</title><rect x="32.0327%" y="101" width="0.1035%" height="15" fill="rgb(217,207,13)" fg:x="9901" fg:w="32"/><text x="32.2827%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (54 samples, 0.17%)</title><rect x="32.1363%" y="101" width="0.1747%" height="15" fill="rgb(231,73,38)" fg:x="9933" fg:w="54"/><text x="32.3863%" y="111.50"></text></g><g><title>consize-interpreter`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (178 samples, 0.58%)</title><rect x="31.8322%" y="117" width="0.5759%" height="15" fill="rgb(225,20,46)" fg:x="9839" fg:w="178"/><text x="32.0822%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (30 samples, 0.10%)</title><rect x="32.3110%" y="101" width="0.0971%" height="15" fill="rgb(210,31,41)" fg:x="9987" fg:w="30"/><text x="32.5610%" y="111.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$malloc (7 samples, 0.02%)</title><rect x="32.4080%" y="117" width="0.0226%" height="15" fill="rgb(221,200,47)" fg:x="10017" fg:w="7"/><text x="32.6580%" y="127.50"></text></g><g><title>consize-interpreter`__rdl_alloc (10 samples, 0.03%)</title><rect x="32.4372%" y="117" width="0.0324%" height="15" fill="rgb(226,26,5)" fg:x="10026" fg:w="10"/><text x="32.6872%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.07%)</title><rect x="32.4695%" y="117" width="0.0744%" height="15" fill="rgb(249,33,26)" fg:x="10036" fg:w="23"/><text x="32.7195%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (60 samples, 0.19%)</title><rect x="32.5439%" y="117" width="0.1941%" height="15" fill="rgb(235,183,28)" fg:x="10059" fg:w="60"/><text x="32.7939%" y="127.50"></text></g><g><title>consize-interpreter`&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (407 samples, 1.32%)</title><rect x="31.4472%" y="133" width="1.3168%" height="15" fill="rgb(221,5,38)" fg:x="9720" fg:w="407"/><text x="31.6972%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.03%)</title><rect x="32.7380%" y="117" width="0.0259%" height="15" fill="rgb(247,18,42)" fg:x="10119" fg:w="8"/><text x="32.9880%" y="127.50"></text></g><g><title>consize-interpreter`&lt;alloc::string::String as core::clone::Clone&gt;::clone (298 samples, 0.96%)</title><rect x="32.7639%" y="133" width="0.9641%" height="15" fill="rgb(241,131,45)" fg:x="10127" fg:w="298"/><text x="33.0139%" y="143.50"></text></g><g><title>consize-interpreter`&lt;alloc::string::String as core::clone::Clone&gt;::clone (24 samples, 0.08%)</title><rect x="34.2457%" y="117" width="0.0776%" height="15" fill="rgb(249,31,29)" fg:x="10585" fg:w="24"/><text x="34.4957%" y="127.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$malloc (9 samples, 0.03%)</title><rect x="34.3233%" y="117" width="0.0291%" height="15" fill="rgb(225,111,53)" fg:x="10609" fg:w="9"/><text x="34.5733%" y="127.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$memcpy (8 samples, 0.03%)</title><rect x="34.3525%" y="117" width="0.0259%" height="15" fill="rgb(238,160,17)" fg:x="10618" fg:w="8"/><text x="34.6025%" y="127.50"></text></g><g><title>consize-interpreter`__rdl_alloc (26 samples, 0.08%)</title><rect x="34.3783%" y="117" width="0.0841%" height="15" fill="rgb(214,148,48)" fg:x="10626" fg:w="26"/><text x="34.6283%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (64 samples, 0.21%)</title><rect x="34.4625%" y="117" width="0.2071%" height="15" fill="rgb(232,36,49)" fg:x="10652" fg:w="64"/><text x="34.7125%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (106 samples, 0.34%)</title><rect x="34.6695%" y="117" width="0.3429%" height="15" fill="rgb(209,103,24)" fg:x="10716" fg:w="106"/><text x="34.9195%" y="127.50"></text></g><g><title>consize-interpreter`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (451 samples, 1.46%)</title><rect x="33.7280%" y="133" width="1.4591%" height="15" fill="rgb(229,88,8)" fg:x="10425" fg:w="451"/><text x="33.9780%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (54 samples, 0.17%)</title><rect x="35.0125%" y="117" width="0.1747%" height="15" fill="rgb(213,181,19)" fg:x="10822" fg:w="54"/><text x="35.2625%" y="127.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$malloc (99 samples, 0.32%)</title><rect x="35.1872%" y="133" width="0.3203%" height="15" fill="rgb(254,191,54)" fg:x="10876" fg:w="99"/><text x="35.4372%" y="143.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$memcpy (57 samples, 0.18%)</title><rect x="35.5075%" y="133" width="0.1844%" height="15" fill="rgb(241,83,37)" fg:x="10975" fg:w="57"/><text x="35.7575%" y="143.50"></text></g><g><title>consize-interpreter`__rdl_alloc (213 samples, 0.69%)</title><rect x="35.6919%" y="133" width="0.6891%" height="15" fill="rgb(233,36,39)" fg:x="11032" fg:w="213"/><text x="35.9419%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (669 samples, 2.16%)</title><rect x="36.3810%" y="133" width="2.1644%" height="15" fill="rgb(226,3,54)" fg:x="11245" fg:w="669"/><text x="36.6310%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (964 samples, 3.12%)</title><rect x="38.5454%" y="133" width="3.1188%" height="15" fill="rgb(245,192,40)" fg:x="11914" fg:w="964"/><text x="38.7954%" y="143.50">lib..</text></g><g><title>consize-interpreter`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4,218 samples, 13.65%)</title><rect x="29.4251%" y="149" width="13.6465%" height="15" fill="rgb(238,167,29)" fg:x="9095" fg:w="4218"/><text x="29.6751%" y="159.50">consize-interpreter`&lt;..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (435 samples, 1.41%)</title><rect x="41.6642%" y="133" width="1.4074%" height="15" fill="rgb(232,182,51)" fg:x="12878" fg:w="435"/><text x="41.9142%" y="143.50"></text></g><g><title>consize-interpreter`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (101 samples, 0.33%)</title><rect x="43.0716%" y="149" width="0.3268%" height="15" fill="rgb(231,60,39)" fg:x="13313" fg:w="101"/><text x="43.3216%" y="159.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$malloc (53 samples, 0.17%)</title><rect x="43.3984%" y="149" width="0.1715%" height="15" fill="rgb(208,69,12)" fg:x="13414" fg:w="53"/><text x="43.6484%" y="159.50"></text></g><g><title>consize-interpreter`__rdl_alloc (32 samples, 0.10%)</title><rect x="43.5698%" y="149" width="0.1035%" height="15" fill="rgb(235,93,37)" fg:x="13467" fg:w="32"/><text x="43.8198%" y="159.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::binary (16 samples, 0.05%)</title><rect x="43.6734%" y="149" width="0.0518%" height="15" fill="rgb(213,116,39)" fg:x="13499" fg:w="16"/><text x="43.9234%" y="159.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::call (25 samples, 0.08%)</title><rect x="43.7251%" y="149" width="0.0809%" height="15" fill="rgb(222,207,29)" fg:x="13515" fg:w="25"/><text x="43.9751%" y="159.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::comment (60 samples, 0.19%)</title><rect x="43.8060%" y="149" width="0.1941%" height="15" fill="rgb(206,96,30)" fg:x="13540" fg:w="60"/><text x="44.0560%" y="159.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::concat (17 samples, 0.06%)</title><rect x="44.0001%" y="149" width="0.0550%" height="15" fill="rgb(218,138,4)" fg:x="13600" fg:w="17"/><text x="44.2501%" y="159.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::dup (25 samples, 0.08%)</title><rect x="44.0551%" y="149" width="0.0809%" height="15" fill="rgb(250,191,14)" fg:x="13617" fg:w="25"/><text x="44.3051%" y="159.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::push (37 samples, 0.12%)</title><rect x="44.1457%" y="149" width="0.1197%" height="15" fill="rgb(239,60,40)" fg:x="13645" fg:w="37"/><text x="44.3957%" y="159.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::rot (33 samples, 0.11%)</title><rect x="44.2654%" y="149" width="0.1068%" height="15" fill="rgb(206,27,48)" fg:x="13682" fg:w="33"/><text x="44.5154%" y="159.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::swap (6 samples, 0.02%)</title><rect x="44.3722%" y="149" width="0.0194%" height="15" fill="rgb(225,35,8)" fg:x="13715" fg:w="6"/><text x="44.6222%" y="159.50"></text></g><g><title>consize-interpreter`&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="44.9966%" y="133" width="0.0291%" height="15" fill="rgb(250,213,24)" fg:x="13908" fg:w="9"/><text x="45.2466%" y="143.50"></text></g><g><title>consize-interpreter`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.02%)</title><rect x="45.0257%" y="133" width="0.0226%" height="15" fill="rgb(247,123,22)" fg:x="13917" fg:w="7"/><text x="45.2757%" y="143.50"></text></g><g><title>consize-interpreter`&lt;consize_interpreter::stack_element::StackElement as core::cmp::PartialEq&gt;::eq (15 samples, 0.05%)</title><rect x="45.0484%" y="133" width="0.0485%" height="15" fill="rgb(231,138,38)" fg:x="13924" fg:w="15"/><text x="45.2984%" y="143.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$free (107 samples, 0.35%)</title><rect x="45.0969%" y="133" width="0.3462%" height="15" fill="rgb(231,145,46)" fg:x="13939" fg:w="107"/><text x="45.3469%" y="143.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$memcpy (21 samples, 0.07%)</title><rect x="45.4431%" y="133" width="0.0679%" height="15" fill="rgb(251,118,11)" fg:x="14046" fg:w="21"/><text x="45.6931%" y="143.50"></text></g><g><title>consize-interpreter`__rdl_dealloc (10 samples, 0.03%)</title><rect x="45.5110%" y="133" width="0.0324%" height="15" fill="rgb(217,147,25)" fg:x="14067" fg:w="10"/><text x="45.7610%" y="143.50"></text></g><g><title>consize-interpreter`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (26 samples, 0.08%)</title><rect x="45.5498%" y="133" width="0.0841%" height="15" fill="rgb(247,81,37)" fg:x="14079" fg:w="26"/><text x="45.7998%" y="143.50"></text></g><g><title>consize-interpreter`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (5 samples, 0.02%)</title><rect x="45.9769%" y="117" width="0.0162%" height="15" fill="rgb(209,12,38)" fg:x="14211" fg:w="5"/><text x="46.2269%" y="127.50"></text></g><g><title>consize-interpreter`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.02%)</title><rect x="46.0125%" y="117" width="0.0162%" height="15" fill="rgb(227,1,9)" fg:x="14222" fg:w="5"/><text x="46.2625%" y="127.50"></text></g><g><title>consize-interpreter`core::fmt::Formatter::pad_integral (9 samples, 0.03%)</title><rect x="46.0287%" y="117" width="0.0291%" height="15" fill="rgb(248,47,43)" fg:x="14227" fg:w="9"/><text x="46.2787%" y="127.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$malloc (4 samples, 0.01%)</title><rect x="46.1872%" y="69" width="0.0129%" height="15" fill="rgb(221,10,30)" fg:x="14276" fg:w="4"/><text x="46.4372%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.05%)</title><rect x="46.2195%" y="69" width="0.0453%" height="15" fill="rgb(210,229,1)" fg:x="14286" fg:w="14"/><text x="46.4695%" y="79.50"></text></g><g><title>consize-interpreter`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (61 samples, 0.20%)</title><rect x="46.1581%" y="85" width="0.1974%" height="15" fill="rgb(222,148,37)" fg:x="14267" fg:w="61"/><text x="46.4081%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (28 samples, 0.09%)</title><rect x="46.2648%" y="69" width="0.0906%" height="15" fill="rgb(234,67,33)" fg:x="14300" fg:w="28"/><text x="46.5148%" y="79.50"></text></g><g><title>consize-interpreter`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (71 samples, 0.23%)</title><rect x="46.1354%" y="101" width="0.2297%" height="15" fill="rgb(247,98,35)" fg:x="14260" fg:w="71"/><text x="46.3854%" y="111.50"></text></g><g><title>consize-interpreter`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.01%)</title><rect x="46.3716%" y="101" width="0.0129%" height="15" fill="rgb(247,138,52)" fg:x="14333" fg:w="4"/><text x="46.6216%" y="111.50"></text></g><g><title>consize-interpreter`core::fmt::Formatter::pad_integral (13 samples, 0.04%)</title><rect x="46.3845%" y="101" width="0.0421%" height="15" fill="rgb(213,79,30)" fg:x="14337" fg:w="13"/><text x="46.6345%" y="111.50"></text></g><g><title>consize-interpreter`core::fmt::Formatter::pad_integral::write_prefix (5 samples, 0.02%)</title><rect x="46.4266%" y="101" width="0.0162%" height="15" fill="rgb(246,177,23)" fg:x="14350" fg:w="5"/><text x="46.6766%" y="111.50"></text></g><g><title>consize-interpreter`core::fmt::num::imp::_&lt;impl core::fmt::Display for i64&gt;::fmt (144 samples, 0.47%)</title><rect x="46.0578%" y="117" width="0.4659%" height="15" fill="rgb(230,62,27)" fg:x="14236" fg:w="144"/><text x="46.3078%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (22 samples, 0.07%)</title><rect x="46.4525%" y="101" width="0.0712%" height="15" fill="rgb(216,154,8)" fg:x="14358" fg:w="22"/><text x="46.7025%" y="111.50"></text></g><g><title>consize-interpreter`core::num::from_str_radix (113 samples, 0.37%)</title><rect x="46.5237%" y="117" width="0.3656%" height="15" fill="rgb(244,35,45)" fg:x="14380" fg:w="113"/><text x="46.7737%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.06%)</title><rect x="46.8893%" y="117" width="0.0582%" height="15" fill="rgb(251,115,12)" fg:x="14493" fg:w="18"/><text x="47.1393%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (137 samples, 0.44%)</title><rect x="46.9475%" y="117" width="0.4432%" height="15" fill="rgb(240,54,50)" fg:x="14511" fg:w="137"/><text x="47.1975%" y="127.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::binary (576 samples, 1.86%)</title><rect x="45.6340%" y="133" width="1.8635%" height="15" fill="rgb(233,84,52)" fg:x="14105" fg:w="576"/><text x="45.8840%" y="143.50">c..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (33 samples, 0.11%)</title><rect x="47.3907%" y="117" width="0.1068%" height="15" fill="rgb(207,117,47)" fg:x="14648" fg:w="33"/><text x="47.6407%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (6 samples, 0.02%)</title><rect x="47.8631%" y="117" width="0.0194%" height="15" fill="rgb(249,43,39)" fg:x="14794" fg:w="6"/><text x="48.1131%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (228 samples, 0.74%)</title><rect x="47.8825%" y="117" width="0.7376%" height="15" fill="rgb(209,38,44)" fg:x="14800" fg:w="228"/><text x="48.1325%" y="127.50"></text></g><g><title>libsystem_platform.dylib`__bzero (15 samples, 0.05%)</title><rect x="48.6201%" y="117" width="0.0485%" height="15" fill="rgb(236,212,23)" fg:x="15028" fg:w="15"/><text x="48.8701%" y="127.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::call (382 samples, 1.24%)</title><rect x="47.4975%" y="133" width="1.2359%" height="15" fill="rgb(242,79,21)" fg:x="14681" fg:w="382"/><text x="47.7475%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (20 samples, 0.06%)</title><rect x="48.6687%" y="117" width="0.0647%" height="15" fill="rgb(211,96,35)" fg:x="15043" fg:w="20"/><text x="48.9187%" y="127.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::comment (105 samples, 0.34%)</title><rect x="48.7334%" y="133" width="0.3397%" height="15" fill="rgb(253,215,40)" fg:x="15063" fg:w="105"/><text x="48.9834%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (7 samples, 0.02%)</title><rect x="49.2963%" y="117" width="0.0226%" height="15" fill="rgb(211,81,21)" fg:x="15237" fg:w="7"/><text x="49.5463%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (86 samples, 0.28%)</title><rect x="49.3190%" y="117" width="0.2782%" height="15" fill="rgb(208,190,38)" fg:x="15244" fg:w="86"/><text x="49.5690%" y="127.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::concat (195 samples, 0.63%)</title><rect x="49.0731%" y="133" width="0.6309%" height="15" fill="rgb(235,213,38)" fg:x="15168" fg:w="195"/><text x="49.3231%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (33 samples, 0.11%)</title><rect x="49.5972%" y="117" width="0.1068%" height="15" fill="rgb(237,122,38)" fg:x="15330" fg:w="33"/><text x="49.8472%" y="127.50"></text></g><g><title>consize-interpreter`&lt;alloc::string::String as core::clone::Clone&gt;::clone (27 samples, 0.09%)</title><rect x="50.4869%" y="117" width="0.0874%" height="15" fill="rgb(244,218,35)" fg:x="15605" fg:w="27"/><text x="50.7369%" y="127.50"></text></g><g><title>consize-interpreter`&lt;alloc::string::String as core::clone::Clone&gt;::clone (35 samples, 0.11%)</title><rect x="50.7328%" y="101" width="0.1132%" height="15" fill="rgb(240,68,47)" fg:x="15681" fg:w="35"/><text x="50.9828%" y="111.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$malloc (12 samples, 0.04%)</title><rect x="50.8460%" y="101" width="0.0388%" height="15" fill="rgb(210,16,53)" fg:x="15716" fg:w="12"/><text x="51.0960%" y="111.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$memcpy (9 samples, 0.03%)</title><rect x="50.8849%" y="101" width="0.0291%" height="15" fill="rgb(235,124,12)" fg:x="15728" fg:w="9"/><text x="51.1349%" y="111.50"></text></g><g><title>consize-interpreter`__rdl_alloc (25 samples, 0.08%)</title><rect x="50.9140%" y="101" width="0.0809%" height="15" fill="rgb(224,169,11)" fg:x="15737" fg:w="25"/><text x="51.1640%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (101 samples, 0.33%)</title><rect x="50.9949%" y="101" width="0.3268%" height="15" fill="rgb(250,166,2)" fg:x="15762" fg:w="101"/><text x="51.2449%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (137 samples, 0.44%)</title><rect x="51.3216%" y="101" width="0.4432%" height="15" fill="rgb(242,216,29)" fg:x="15863" fg:w="137"/><text x="51.5716%" y="111.50"></text></g><g><title>consize-interpreter`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (425 samples, 1.38%)</title><rect x="50.5743%" y="117" width="1.3750%" height="15" fill="rgb(230,116,27)" fg:x="15632" fg:w="425"/><text x="50.8243%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (57 samples, 0.18%)</title><rect x="51.7649%" y="101" width="0.1844%" height="15" fill="rgb(228,99,48)" fg:x="16000" fg:w="57"/><text x="52.0149%" y="111.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$malloc (6 samples, 0.02%)</title><rect x="51.9493%" y="117" width="0.0194%" height="15" fill="rgb(253,11,6)" fg:x="16057" fg:w="6"/><text x="52.1993%" y="127.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$memcpy (6 samples, 0.02%)</title><rect x="51.9687%" y="117" width="0.0194%" height="15" fill="rgb(247,143,39)" fg:x="16063" fg:w="6"/><text x="52.2187%" y="127.50"></text></g><g><title>consize-interpreter`__rdl_alloc (14 samples, 0.05%)</title><rect x="51.9881%" y="117" width="0.0453%" height="15" fill="rgb(236,97,10)" fg:x="16069" fg:w="14"/><text x="52.2381%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (32 samples, 0.10%)</title><rect x="52.0334%" y="117" width="0.1035%" height="15" fill="rgb(233,208,19)" fg:x="16083" fg:w="32"/><text x="52.2834%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (49 samples, 0.16%)</title><rect x="52.1369%" y="117" width="0.1585%" height="15" fill="rgb(216,164,2)" fg:x="16115" fg:w="49"/><text x="52.3869%" y="127.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::dup (820 samples, 2.65%)</title><rect x="49.7040%" y="133" width="2.6529%" height="15" fill="rgb(220,129,5)" fg:x="15363" fg:w="820"/><text x="49.9540%" y="143.50">co..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (19 samples, 0.06%)</title><rect x="52.2954%" y="117" width="0.0615%" height="15" fill="rgb(242,17,10)" fg:x="16164" fg:w="19"/><text x="52.5454%" y="127.50"></text></g><g><title>consize-interpreter`&lt;consize_interpreter::stack_element::StackElement as core::cmp::PartialEq&gt;::eq (10 samples, 0.03%)</title><rect x="52.5154%" y="117" width="0.0324%" height="15" fill="rgb(242,107,0)" fg:x="16232" fg:w="10"/><text x="52.7654%" y="127.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$free (18 samples, 0.06%)</title><rect x="52.5478%" y="117" width="0.0582%" height="15" fill="rgb(251,28,31)" fg:x="16242" fg:w="18"/><text x="52.7978%" y="127.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$memcmp (6 samples, 0.02%)</title><rect x="52.6060%" y="117" width="0.0194%" height="15" fill="rgb(233,223,10)" fg:x="16260" fg:w="6"/><text x="52.8560%" y="127.50"></text></g><g><title>consize-interpreter`core::ptr::drop_in_place&lt;consize_interpreter::stack_element::StackElement&gt; (16 samples, 0.05%)</title><rect x="52.6934%" y="101" width="0.0518%" height="15" fill="rgb(215,21,27)" fg:x="16287" fg:w="16"/><text x="52.9434%" y="111.50"></text></g><g><title>consize-interpreter`core::ptr::drop_in_place&lt;(consize_interpreter::stack_element::StackElement,consize_interpreter::stack_element::StackElement)&gt; (137 samples, 0.44%)</title><rect x="52.6319%" y="117" width="0.4432%" height="15" fill="rgb(232,23,21)" fg:x="16268" fg:w="137"/><text x="52.8819%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (102 samples, 0.33%)</title><rect x="52.7452%" y="101" width="0.3300%" height="15" fill="rgb(244,5,23)" fg:x="16303" fg:w="102"/><text x="52.9952%" y="111.50"></text></g><g><title>consize-interpreter`core::ptr::drop_in_place&lt;consize_interpreter::stack_element::StackElement&gt; (9 samples, 0.03%)</title><rect x="53.0752%" y="117" width="0.0291%" height="15" fill="rgb(226,81,46)" fg:x="16405" fg:w="9"/><text x="53.3252%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (6 samples, 0.02%)</title><rect x="53.1043%" y="117" width="0.0194%" height="15" fill="rgb(247,70,30)" fg:x="16414" fg:w="6"/><text x="53.3543%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_free (62 samples, 0.20%)</title><rect x="53.1237%" y="117" width="0.2006%" height="15" fill="rgb(212,68,19)" fg:x="16420" fg:w="62"/><text x="53.3737%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (135 samples, 0.44%)</title><rect x="53.3243%" y="117" width="0.4368%" height="15" fill="rgb(240,187,13)" fg:x="16482" fg:w="135"/><text x="53.5743%" y="127.50"></text></g><g><title>libsystem_platform.dylib`__bzero (6 samples, 0.02%)</title><rect x="53.7610%" y="117" width="0.0194%" height="15" fill="rgb(223,113,26)" fg:x="16617" fg:w="6"/><text x="54.0110%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (11 samples, 0.04%)</title><rect x="53.7805%" y="117" width="0.0356%" height="15" fill="rgb(206,192,2)" fg:x="16623" fg:w="11"/><text x="54.0305%" y="127.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::get (489 samples, 1.58%)</title><rect x="52.3569%" y="133" width="1.5821%" height="15" fill="rgb(241,108,4)" fg:x="16183" fg:w="489"/><text x="52.6069%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (38 samples, 0.12%)</title><rect x="53.8160%" y="117" width="0.1229%" height="15" fill="rgb(247,173,49)" fg:x="16634" fg:w="38"/><text x="54.0660%" y="127.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$malloc (7 samples, 0.02%)</title><rect x="56.3525%" y="101" width="0.0226%" height="15" fill="rgb(224,114,35)" fg:x="17418" fg:w="7"/><text x="56.6025%" y="111.50"></text></g><g><title>consize-interpreter`DYLD-STUB$$realloc (6 samples, 0.02%)</title><rect x="56.3752%" y="101" width="0.0194%" height="15" fill="rgb(245,159,27)" fg:x="17425" fg:w="6"/><text x="56.6252%" y="111.50"></text></g><g><title>consize-interpreter`__rdl_alloc (7 samples, 0.02%)</title><rect x="56.3946%" y="101" width="0.0226%" height="15" fill="rgb(245,172,44)" fg:x="17431" fg:w="7"/><text x="56.6446%" y="111.50"></text></g><g><title>consize-interpreter`__rdl_realloc (10 samples, 0.03%)</title><rect x="56.4172%" y="101" width="0.0324%" height="15" fill="rgb(236,23,11)" fg:x="17438" fg:w="10"/><text x="56.6672%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (8 samples, 0.03%)</title><rect x="56.4755%" y="85" width="0.0259%" height="15" fill="rgb(205,117,38)" fg:x="17456" fg:w="8"/><text x="56.7255%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (4 samples, 0.01%)</title><rect x="56.5855%" y="53" width="0.0129%" height="15" fill="rgb(237,72,25)" fg:x="17490" fg:w="4"/><text x="56.8355%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (16 samples, 0.05%)</title><rect x="56.5984%" y="53" width="0.0518%" height="15" fill="rgb(244,70,9)" fg:x="17494" fg:w="16"/><text x="56.8484%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 0.07%)</title><rect x="56.6502%" y="53" width="0.0679%" height="15" fill="rgb(217,125,39)" fg:x="17510" fg:w="21"/><text x="56.9002%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (27 samples, 0.09%)</title><rect x="56.7181%" y="53" width="0.0874%" height="15" fill="rgb(235,36,10)" fg:x="17531" fg:w="27"/><text x="56.9681%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (48 samples, 0.16%)</title><rect x="56.8669%" y="37" width="0.1553%" height="15" fill="rgb(251,123,47)" fg:x="17577" fg:w="48"/><text x="57.1169%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (84 samples, 0.27%)</title><rect x="56.8055%" y="53" width="0.2718%" height="15" fill="rgb(221,13,13)" fg:x="17558" fg:w="84"/><text x="57.0555%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (17 samples, 0.06%)</title><rect x="57.0222%" y="37" width="0.0550%" height="15" fill="rgb(238,131,9)" fg:x="17625" fg:w="17"/><text x="57.2722%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (185 samples, 0.60%)</title><rect x="56.5466%" y="69" width="0.5985%" height="15" fill="rgb(211,50,8)" fg:x="17478" fg:w="185"/><text x="56.7966%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.07%)</title><rect x="57.0772%" y="53" width="0.0679%" height="15" fill="rgb(245,182,24)" fg:x="17642" fg:w="21"/><text x="57.3272%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (210 samples, 0.68%)</title><rect x="56.5013%" y="85" width="0.6794%" height="15" fill="rgb(242,14,37)" fg:x="17464" fg:w="210"/><text x="56.7513%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (10 samples, 0.03%)</title><rect x="57.1484%" y="69" width="0.0324%" height="15" fill="rgb(246,228,12)" fg:x="17664" fg:w="10"/><text x="57.3984%" y="79.50"></text></g><g><title>consize-interpreter`alloc::raw_vec::finish_grow (247 samples, 0.80%)</title><rect x="56.4496%" y="101" width="0.7991%" height="15" fill="rgb(213,55,15)" fg:x="17448" fg:w="247"/><text x="56.6996%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (21 samples, 0.07%)</title><rect x="57.1808%" y="85" width="0.0679%" height="15" fill="rgb(209,9,3)" fg:x="17674" fg:w="21"/><text x="57.4308%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (30 samples, 0.10%)</title><rect x="57.2487%" y="101" width="0.0971%" height="15" fill="rgb(230,59,30)" fg:x="17695" fg:w="30"/><text x="57.4987%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (10 samples, 0.03%)</title><rect x="57.3458%" y="101" width="0.0324%" height="15" fill="rgb(209,121,21)" fg:x="17725" fg:w="10"/><text x="57.5958%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (48 samples, 0.16%)</title><rect x="57.3781%" y="101" width="0.1553%" height="15" fill="rgb(220,109,13)" fg:x="17735" fg:w="48"/><text x="57.6281%" y="111.50"></text></g><g><title>consize-interpreter`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (474 samples, 1.53%)</title><rect x="56.0096%" y="117" width="1.5335%" height="15" fill="rgb(232,18,1)" fg:x="17312" fg:w="474"/><text x="56.2596%" y="127.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::push (1,129 samples, 3.65%)</title><rect x="53.9390%" y="133" width="3.6527%" height="15" fill="rgb(215,41,42)" fg:x="16672" fg:w="1129"/><text x="54.1890%" y="143.50">cons..</text></g><g><title>consize-interpreter`alloc::raw_vec::finish_grow (15 samples, 0.05%)</title><rect x="57.5431%" y="117" width="0.0485%" height="15" fill="rgb(224,123,36)" fg:x="17786" fg:w="15"/><text x="57.7931%" y="127.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::rot (98 samples, 0.32%)</title><rect x="57.5916%" y="133" width="0.3171%" height="15" fill="rgb(240,125,3)" fg:x="17801" fg:w="98"/><text x="57.8416%" y="143.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::swap (32 samples, 0.10%)</title><rect x="57.9087%" y="133" width="0.1035%" height="15" fill="rgb(205,98,50)" fg:x="17899" fg:w="32"/><text x="58.1587%" y="143.50"></text></g><g><title>consize-interpreter`core::fmt::Formatter::new (7 samples, 0.02%)</title><rect x="58.0155%" y="133" width="0.0226%" height="15" fill="rgb(205,185,37)" fg:x="17932" fg:w="7"/><text x="58.2655%" y="143.50"></text></g><g><title>consize-interpreter`core::num::from_str_radix (4 samples, 0.01%)</title><rect x="58.0381%" y="133" width="0.0129%" height="15" fill="rgb(238,207,15)" fg:x="17939" fg:w="4"/><text x="58.2881%" y="143.50"></text></g><g><title>consize-interpreter`core::ptr::drop_in_place&lt;consize_interpreter::stack_element::StackElement&gt; (10 samples, 0.03%)</title><rect x="58.0511%" y="133" width="0.0324%" height="15" fill="rgb(213,199,42)" fg:x="17943" fg:w="10"/><text x="58.3011%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_free (318 samples, 1.03%)</title><rect x="58.0834%" y="133" width="1.0288%" height="15" fill="rgb(235,201,11)" fg:x="17953" fg:w="318"/><text x="58.3334%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (86 samples, 0.28%)</title><rect x="59.1122%" y="133" width="0.2782%" height="15" fill="rgb(207,46,11)" fg:x="18271" fg:w="86"/><text x="59.3622%" y="143.50"></text></g><g><title>consize-interpreter`core::ops::function::Fn::call (4,979 samples, 16.11%)</title><rect x="44.3916%" y="149" width="16.1086%" height="15" fill="rgb(241,35,35)" fg:x="13721" fg:w="4979"/><text x="44.6416%" y="159.50">consize-interpreter`core:..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (343 samples, 1.11%)</title><rect x="59.3905%" y="133" width="1.1097%" height="15" fill="rgb(243,32,47)" fg:x="18357" fg:w="343"/><text x="59.6405%" y="143.50"></text></g><g><title>consize-interpreter`core::ptr::drop_in_place&lt;consize_interpreter::stack_element::StackElement&gt; (14 samples, 0.05%)</title><rect x="60.5002%" y="149" width="0.0453%" height="15" fill="rgb(247,202,23)" fg:x="18700" fg:w="14"/><text x="60.7502%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (6 samples, 0.02%)</title><rect x="60.5455%" y="149" width="0.0194%" height="15" fill="rgb(219,102,11)" fg:x="18714" fg:w="6"/><text x="60.7955%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (181 samples, 0.59%)</title><rect x="60.5649%" y="149" width="0.5856%" height="15" fill="rgb(243,110,44)" fg:x="18720" fg:w="181"/><text x="60.8149%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1,938 samples, 6.27%)</title><rect x="61.1505%" y="149" width="6.2700%" height="15" fill="rgb(222,74,54)" fg:x="18901" fg:w="1938"/><text x="61.4005%" y="159.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.02%)</title><rect x="67.4205%" y="149" width="0.0162%" height="15" fill="rgb(216,99,12)" fg:x="20839" fg:w="5"/><text x="67.6705%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (259 samples, 0.84%)</title><rect x="67.4367%" y="149" width="0.8379%" height="15" fill="rgb(226,22,26)" fg:x="20844" fg:w="259"/><text x="67.6867%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (15 samples, 0.05%)</title><rect x="68.2746%" y="149" width="0.0485%" height="15" fill="rgb(217,163,10)" fg:x="21103" fg:w="15"/><text x="68.5246%" y="159.50"></text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::stepcc (18,994 samples, 61.45%)</title><rect x="7.3215%" y="165" width="61.4514%" height="15" fill="rgb(213,25,53)" fg:x="2263" fg:w="18994"/><text x="7.5715%" y="175.50">consize-interpreter`consize_interpreter::interpreter::Interpreter::stepcc</text></g><g><title>libsystem_platform.dylib`_platform_memset (139 samples, 0.45%)</title><rect x="68.3231%" y="149" width="0.4497%" height="15" fill="rgb(252,105,26)" fg:x="21118" fg:w="139"/><text x="68.5731%" y="159.50"></text></g><g><title>consize-interpreter`core::ops::function::Fn::call (140 samples, 0.45%)</title><rect x="68.7728%" y="165" width="0.4529%" height="15" fill="rgb(220,39,43)" fg:x="21257" fg:w="140"/><text x="69.0228%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (986 samples, 3.19%)</title><rect x="69.2258%" y="165" width="3.1900%" height="15" fill="rgb(229,68,48)" fg:x="21397" fg:w="986"/><text x="69.4758%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (61 samples, 0.20%)</title><rect x="72.4158%" y="165" width="0.1974%" height="15" fill="rgb(252,8,32)" fg:x="22383" fg:w="61"/><text x="72.6658%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (321 samples, 1.04%)</title><rect x="72.6132%" y="165" width="1.0385%" height="15" fill="rgb(223,20,43)" fg:x="22444" fg:w="321"/><text x="72.8632%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.02%)</title><rect x="73.6517%" y="165" width="0.0162%" height="15" fill="rgb(229,81,49)" fg:x="22765" fg:w="5"/><text x="73.9017%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (74 samples, 0.24%)</title><rect x="73.6679%" y="165" width="0.2394%" height="15" fill="rgb(236,28,36)" fg:x="22770" fg:w="74"/><text x="73.9179%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (7,526 samples, 24.35%)</title><rect x="73.9073%" y="165" width="24.3489%" height="15" fill="rgb(249,185,26)" fg:x="22844" fg:w="7526"/><text x="74.1573%" y="175.50">libsystem_platform.dylib`_platform_memc..</text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::func::_{{closure}} (30,530 samples, 98.77%)</title><rect x="0.0000%" y="181" width="98.7738%" height="15" fill="rgb(249,174,33)" fg:x="0" fg:w="30530"/><text x="0.2500%" y="191.50">consize-interpreter`consize_interpreter::interpreter::Interpreter::func::_{{closure}}</text></g><g><title>libsystem_platform.dylib`_platform_memmove (160 samples, 0.52%)</title><rect x="98.2562%" y="165" width="0.5176%" height="15" fill="rgb(233,201,37)" fg:x="30370" fg:w="160"/><text x="98.5062%" y="175.50"></text></g><g><title>all (30,909 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="30909"/><text x="0.2500%" y="319.50"></text></g><g><title>dyld`start (30,909 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(250,127,30)" fg:x="0" fg:w="30909"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>consize-interpreter`main (30,909 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(230,49,44)" fg:x="0" fg:w="30909"/><text x="0.2500%" y="287.50">consize-interpreter`main</text></g><g><title>consize-interpreter`std::rt::lang_start_internal (30,909 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(229,67,23)" fg:x="0" fg:w="30909"/><text x="0.2500%" y="271.50">consize-interpreter`std::rt::lang_start_internal</text></g><g><title>consize-interpreter`std::rt::lang_start::_{{closure}} (30,909 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(249,83,47)" fg:x="0" fg:w="30909"/><text x="0.2500%" y="255.50">consize-interpreter`std::rt::lang_start::_{{closure}}</text></g><g><title>consize-interpreter`std::sys_common::backtrace::__rust_begin_short_backtrace (30,909 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(215,43,3)" fg:x="0" fg:w="30909"/><text x="0.2500%" y="239.50">consize-interpreter`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>consize-interpreter`consize_interpreter::main (30,909 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,154,13)" fg:x="0" fg:w="30909"/><text x="0.2500%" y="223.50">consize-interpreter`consize_interpreter::main</text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::apply (30,909 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(219,56,2)" fg:x="0" fg:w="30909"/><text x="0.2500%" y="207.50">consize-interpreter`consize_interpreter::interpreter::Interpreter::apply</text></g><g><title>consize-interpreter`consize_interpreter::interpreter::Interpreter::stepcc (379 samples, 1.23%)</title><rect x="98.7738%" y="181" width="1.2262%" height="15" fill="rgb(233,0,4)" fg:x="30530" fg:w="379"/><text x="99.0238%" y="191.50"></text></g></svg></svg>